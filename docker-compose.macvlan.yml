# MacVLAN network configuration for Docker Compose
# This is my recommended way to run the container in a Docker environment
# As it allows the container to have its own IP address on the network
# Plus provide ability to have fireawall rules to restrict access to other resources on the network.

services:
    unifi-ddns-cron:
        image: "uguler/unifi-firewall-ddns-sync:latest"
        # supported platforms: linux/amd64, linux/arm64, linux/arm/v7
        # platform: linux/amd64
        container_name: unifi-ddns-cron
        networks:
            management-vlan:
                ipv4_address: 192.168.0.10
        stop_grace_period: 2s
        environment:
            CRON_MINS: "${CRON_MINS}"
            CRON_HOURS: "${CRON_HOURS}"
            CRON_DAYS: "${CRON_DAYS}"
            RUN_ONCE: "${RUN_ONCE}"
            UNIFI_GATEWAY: "${UNIFI_GATEWAY}"
            UNIFI_GATEWAY_HTTPS: "${UNIFI_GATEWAY_HTTPS}"
            UNIFI_USERNAME: "${UNIFI_USERNAME}"
            UNIFI_PASSWORD: "${UNIFI_PASSWORD}"
            UNIFI_SITE: "${UNIFI_SITE}"
            UNIFI_SITE_ID: "${UNIFI_SITE_ID}"
            UNIFI_NO_VERIFY_SSL: "${UNIFI_NO_VERIFY_SSL}"
            UNIFI_RULE_FILENAME: "${UNIFI_RULE_FILENAME}"
        volumes:
            - ${CONFIG_VOLUME}:/config/
        healthcheck:
            # Using curl with -s (silent), -f (fail on >=400), -k (ignore cert verification)
            test: ["CMD-SHELL", "curl -sfk https://${UNIFI_GATEWAY} || exit 1"]
            interval: ${HEALTHCHECK_INTERVAL}
            timeout: ${HEALTHCHECK_TIMEOUT}
            retries: ${HEALTHCHECK_RETRIES}
networks:
    management-vlan:
        driver: macvlan
        driver_opts:
            parent: eth0.1
        ipam:
            config:
                - subnet: 192.168.0.0/24
                  gateway: 192.168.0.1
